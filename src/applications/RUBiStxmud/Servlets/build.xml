<!-- Servlets Ant build file -->
<project name="Servlets" default="dist" basedir=".">
	<property file="../build.properties" />
	<property name="servlets.html" value="../Servlet_HTML" />
	<!-- ====================================================================== -->
	<!-- Init -->
	<!-- ====================================================================== -->

	<!-- init rule creates build directory -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- The classpath to be used to compile  -->
		<path id="base.classpath">
			<pathelement location="${classes.dir}" />
			<fileset dir="${lib.dir}">
				<include name="servlet-api.jar" />
				<include name="jdbctxmud.jar"/>
				<include name="netty-3.2.1.Final.jar"/>
				<include name="log4j-1.2.15.jar"/>
				<include name="jsqlparser.jar"/>
	            <include name="georeplication.jar"/>
				<include name="vasco-1.0-SNAPSHOT.jar"/>
			</fileset>
		</path>

		<!-- Deployment environment-->
		<property name="tomcat_root" value="/var/tmp/${user.name}/txmud/tomcat6" />
		<property name="mysql_root" value="/var/tmp/${user.name}/mysql-5.5.18" />
		<property name="mysql_host" value="localhost" />
		<property name="mysql_port" value="50000" />

		<!-- define variables -->
		<property name="dcId" value="0" />
		<property name="proxyId" value="0" />
		<property name="totalproxy" value="1" />
		<property name="nthreads" value="20" />
		<property name="dcCount" value = "1"/>
		<property name="ssId" value="0"/>
		<property name="scratchpadNum" value="20"/>
		<property name="dbpool" value="100"/>
		<property name="dbFile" value="rubis_txmud_db.xml"/>
		<property name="topologyfile" value="rubis_txmud.xml"/>
		
		<!-- for Sifter and Vasco -->
		<property name ="schemaPath" value = ""/>
		<property name ="wpFilePath" value = ""/>



		<!-- set global properties for this build -->

		<property name="backend" value="mysql" />
		<condition property="initializeBackend" value="initializeMysqlBackend();">
			<equals arg1="${backend}" arg2="mysql" casesensitive="no" trim="yes" />
		</condition>
		<condition property="initializeBackend" value="initializeTxMudBackend();">
			<equals arg1="${backend}" arg2="txmud" casesensitive="no" trim="yes" />
		</condition>
	    <condition property="initializeBackend" value="initializeSifterBackend();">
	         <equals arg1="${backend}" arg2="sifter" casesensitive="no" trim="yes" />
	    </condition>
	    <condition property="initializeBackend" value="initializeVascoBackend();">
	         <equals arg1="${backend}" arg2="vasco" casesensitive="no" trim="yes" />
	    </condition>
		<!-- suffix -->
		<condition property="suffix" value="Mysql">
			<equals arg1="${backend}" arg2="mysql" casesensitive="no" trim="yes" />
		</condition>
		<condition property="suffix" value="TxMud">
			<equals arg1="${backend}" arg2="txmud" casesensitive="no" trim="yes" />
		</condition>
	    <condition property="suffix" value="Sifter">
	        <equals arg1="${backend}" arg2="sifter" casesensitive="no" trim="yes" />
	    </condition>
	    <condition property="suffix" value="Vasco">
	        <equals arg1="${backend}" arg2="vasco" casesensitive="no" trim="yes" />
	    </condition>


		<!-- Mysql configuration -->
		<condition property="txmud.setmeasurementinterval" value="">
				<equals arg1="${backend}" arg2="mysql" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getaborts" value="0">
					<equals arg1="${backend}" arg2="mysql" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getredtxn" value="0">
			<equals arg1="${backend}" arg2="mysql" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getbluetxn" value="Database.transactions">
			<equals arg1="${backend}" arg2="mysql" casesensitive="no" trim="yes" />
		</condition>
		
		
		<!-- TxMud configuration -->
		<condition property="txmud.setmeasurementinterval" value="Database.proxy.setMeasurementInterval(Database.startmi,Database.endmi);">
			<equals arg1="${backend}" arg2="txmud" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getaborts" value="Database.proxy.getAbortedTransactions()">
					<equals arg1="${backend}" arg2="txmud" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getredtxn" value="Database.proxy.getRedTransactions()">
			<equals arg1="${backend}" arg2="txmud" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getbluetxn" value="Database.proxy.getBlueTransactions()">
			<equals arg1="${backend}" arg2="txmud" casesensitive="no" trim="yes" />
		</condition>
	            	
	    <!-- Sifter configuration -->
	    <condition property="txmud.setmeasurementinterval" value="Database.proxy.setMeasurementInterval(Database.startmi,Database.endmi);">
	        <equals arg1="${backend}" arg2="sifter" casesensitive="no" trim="yes" />
	    </condition>
	    <condition property="txmud.getaborts" value="Database.proxy.getAbortedTransactions()">
	        <equals arg1="${backend}" arg2="sifter" casesensitive="no" trim="yes" />
	    </condition>
	    <condition property="txmud.getredtxn" value="Database.proxy.getRedTransactions()">
	         <equals arg1="${backend}" arg2="sifter" casesensitive="no" trim="yes" />
	    </condition>
	    <condition property="txmud.getbluetxn" value="Database.proxy.getBlueTransactions()">
	         <equals arg1="${backend}" arg2="sifter" casesensitive="no" trim="yes" />
	    </condition>
		
		<!-- Vasco configuration -->
	    <condition property="txmud.setmeasurementinterval" value="Database.proxy.setMeasurementInterval(Database.startmi,Database.endmi);">
			 <equals arg1="${backend}" arg2="vasco" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getaborts" value="Database.proxy.getAbortedTransactions()">
		     <equals arg1="${backend}" arg2="vasco" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getredtxn" value="Database.proxy.getRedTransactions()">
		     <equals arg1="${backend}" arg2="vasco" casesensitive="no" trim="yes" />
		</condition>
		<condition property="txmud.getbluetxn" value="Database.proxy.getBlueTransactions()">
		     <equals arg1="${backend}" arg2="vasco" casesensitive="no" trim="yes" />
		</condition>

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes.dir}" />
	</target>

	<!-- ====================================================================== -->
	<!-- Servlets -->
	<!-- ====================================================================== -->
	<target name="mksrc" depends="init">
		<filter token="dcId" value="${dcId}" />
		<filter token="proxyId" value="${proxyId}" />
		<filter token="totalproxy" value="${totalproxy}" />
		<filter token="nthreads" value="${nthreads}" />
		<filter token="dcCount" value = "${dcCount}"/>
		<filter token="ssId" value="${ssId}"/>
		<filter token="scratchpadNum" value="${scratchpadNum}"/>
		<filter token="dbpool" value="${dbpool}"/>
		<filter token="dbFile" value="${dbFile}"/>
		<filter token ="topologyfile" value="${topologyfile}"/>
		
		<filter token="txmud.getaborts" value="${txmud.getaborts}" />
		<filter token="txmud.getredtxn" value="${txmud.getredtxn}" />
		<filter token="txmud.getbluetxn" value="${txmud.getbluetxn}" />
		<filter token="txmud.setmeasurementinterval" value="${txmud.setmeasurementinterval}" />
		<filter token="schemaPath" value="${schemaPath}"/>
		<filter token="wpFilePath" value="${wpFilePath}"/>
		
		

		<copy tofile="${servlets.html}/WEB-INF/web.xml" filtering="on" preservelastmodified="false">
			<fileset file="${servlets.html}/web.xml" casesensitive="yes" />
		</copy>
		<filter token="initializeBackend" value="${initializeBackend}" />
		<copy todir="${src}" filtering="on" preservelastmodified="false">
			<fileset dir="${metasource.dir}" casesensitive="yes">
				<include name="**/*" />
			</fileset>
			<mapper>
				<globmapper from="*.${suffix}.java" to="*.java" />
				<globmapper from="*.STD.java" to="*.java" />
			</mapper>

		</copy>

	</target>



	<!-- Creates a jar file containing the servlets -->
	<target name="jar" depends="init, compile">
		<jar destfile="${dist}/rubis_servlets.jar">
			<fileset dir="${classes.dir}" includes="edu/rice/rubis/servlets/*.class" />
		</jar>
	</target>

	<!-- Create a war file-->
	<target name="war" depends="init, compile, jar">
		<copy file="mysql.properties" todir="${servlets.html}/WEB-INF/classes" />
		<copy file="${dist}/rubis_servlets.jar" todir="${servlets.html}/WEB-INF/lib" />
		<war destfile="${dist}/rubis_servlets.war" webxml="${servlets.html}/WEB-INF/web.xml" basedir="${web.dir}">
			<fileset dir="${classes.dir}" includes="*" />
		</war>
	</target>

	<!-- Dist rule -->
	<target name="dist" depends="init, mksrc,compile, jar, war">
	</target>

	<!-- compile rule: Compile the beans and the servlets -->
	<target name="compile" depends="init">
		<javac srcdir="${src}" includes="edu/rice/rubis/servlets/*" destdir="${classes.dir}" classpath="${build.classpath}" depend="yes" deprecation="yes">
			<classpath refid="base.classpath" />
		</javac>
	</target>

	<target name="deploy" depends="dist">
		<copy file="rubis_servlets.war" todir="${webapps.dir}" />
	</target>

	<target name="start" depends="tomcat-start" >
		<!-- <exec executable="${dist}tomcat_start.sh"/> --> 
	</target>


	<target name="undeploy" depends="tomcat-stop">
		<!-- <exec executable="${dist}tomcat_stop.sh"/> -->
		<delete dir="${webapps.dir}/rubis_servlets" />
		<delete dir="${webapps.dir}/rubis_servlets.war" />
		<delete>
			<fileset dir="${webapps.dir}" includes="rubis_servlets.war" />
		</delete>
	</target>

	<!-- ====================================================================== -->
	<!-- Javadoc -->
	<!-- ====================================================================== -->

	<!-- Generate Javadoc documentation -->
	<target name="doc" depends="mksrc">
		<mkdir dir="docs/api" />
		<javadoc classpathref="base.classpath" packagenames="edu.rice.rubis.*.*" sourcepath="${src}" defaultexcludes="yes" destdir="docs/api" author="true" version="true" use="true" windowtitle="RUBiS API">
			<doctitle>
				<![CDATA[<h1>RUBiS API</h1>]]></doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2002 - ObjectWeb Consortium - All Rights Reserved.</i>]]></bottom>
</javadoc>
</target>

<!-- ====================================================================== -->
<!-- Clean -->
<!-- ====================================================================== -->

<target name="clean">
<!-- Delete the ${classes.dir} and ${dist} directory trees -->
<delete dir="${classes.dir}" />
<delete dir="edu" />
<delete>
	<fileset dir="${dist}" includes="rubis_servlets.jar" />
</delete>
<delete>
	<fileset dir="${dist}" includes="rubis_servlets.war" />
</delete>
<delete file="${servlets.html}/WEB-INF/web.xml"/>
<!--
<delete>
	<fileset dir="edu" includes="**/*.class" />
</delete>
-->
</target>

<target name="clean-doc">
<delete dir="docs/api" />
</target>
<!-- ====================================================================== -->
<!-- Proxy -->
<!-- ====================================================================== -->
<target name="tomcat-start" depends="init">
<exec executable="${tomcat_root}/bin/startup.sh" />
<waitfor maxwait="10" maxwaitunit="second">
	<and>
		<socket server="localhost" port="8080" />
	</and>
</waitfor>
<echo message="tomcat started!!" />
</target>

<target name="tomcat-stop" depends="init">
<exec executable="${tomcat_root}/bin/shutdown.sh" />
</target>

<target name="tomcat-check-status">
<condition property="tomcat.started">
	<socket server="localhost" port="8080" />
</condition>
</target>
<target name="mysql-check-status">
<condition property="mysql.started">
	<socket server="${mysql_host}" port="${mysql_port}" />
</condition>
</target>

<!-- ====================================================================== -->
<!-- Backend -->
<!-- ====================================================================== -->


<target name="mysql-start" depends="init">
<exec dir="${mysql_root}" executable="${mysql_root}/bin/mysqld_safe" spawn="true">
	<arg value="--defaults-file=${mysql_root}/mysql-test/include/default_mysqld.cnf" />
	<arg value="--user=${user.name}" />
	<arg value="--port=${mysql_port}" />
	<arg value="--max_connections=10000" />
	<arg value="--max_user_connections=10000" />
	<!-- <arg value="- -innodb_buffer_pool_size=8G" /> --> 
	
	<arg value="--innodb_buffer_pool_size=4G" /> 
	<!-- <arg value="- -innodb_log_file_size=128M"/> -->
	<arg value="--innodb_flush_method=O_DIRECT" />
	<arg value="--skip-innodb_doublewrite" />
	<arg value="--innodb_flush_log_at_trx_commit=0" />
	
	<arg value="--query_cache_size=512M" /> 
	<arg value="--innodb_lock_wait_timeout=1" /> 
	<arg value="--innodb_file_per_table" /> 
	<arg value="--default-storage-engine=innodb" />  
</exec>
<waitfor maxwait="10" maxwaitunit="second">
	<and>
		<socket server="${mysql_host}" port="${mysql_port}" />
	</and>
</waitfor>
<echo message="mysql started!!" />
</target>

<target name="mysql-stop" depends="init">
<exec dir="${mysql_root}" executable="killall">
	<arg value="-9" />
	<arg value="mysqld_safe" />
	<arg value="mysql" />
	<arg value="mysqld" />

</exec>
</target>




</project>

