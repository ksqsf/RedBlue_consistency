package edu.rice.rubis.servlets;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
//import javax.transaction.UserTransaction;

/** 
 * Declare the winner in the database 
 * @author Cheng Li
 * @version 1.0
 */
public class CloseAuction extends HttpServlet
{
  //private UserTransaction utx = null;
  

/**
 * Display an error message.
 * @param errorMsg the error message value
 */
  private void printError(String errorMsg, ServletPrinter sp)
  {
    sp.printHTMLheader("RUBiS ERROR: Close auction");
    sp.printHTML(
      "<h2>Your registration has not been processed due to the following error :</h2><br>");
    sp.printHTML(errorMsg);
    sp.printHTMLfooter();


  }

  public void doGet(HttpServletRequest request, HttpServletResponse response)
    throws IOException, ServletException
  {
    PreparedStatement stmt = null;
    Connection conn = null;

    ServletPrinter sp = null;
    sp = new ServletPrinter(response, "CloseAuction");

    int itemId = Integer.parseInt(request.getParameter("itemId"));
    int userId = -1;
    float bidValue = 0.0f;
    
    conn = Database.getConnection();
  //update the end date of this item
    String now = TimeManagement.currentDateToString();
      try
      {
        //first check whether it is still open or not
    	stmt = conn.prepareStatement("SELECT id FROM items WHERE id = ? AND end_date <= ? ");
    	stmt.setInt(1, itemId);
    	stmt.setString(2, now);
    	
    	ResultSet rs = stmt.executeQuery();
    	
    	if(rs.first()){
    		System.out.println("item already closed " + itemId);
    		printError(
    	            " item " + itemId + " already closed", sp);
    	         Database.commit(conn);
    	         Database.closeConnection(stmt, conn);
    	          return;
    	}
    	rs.close();
    	stmt.close();
    	
        stmt = conn.prepareStatement("SELECT user_id, bid FROM bids where bids.item_id = ? ORDER BY bid DESC LIMIT 1");
        stmt.setInt(1, itemId);
        rs = stmt.executeQuery();
        if (!rs.first())
        {
          printError(
            " item " + itemId + " does not have any bids in the database!<br>", sp);
         Database.commit(conn);
         Database.closeConnection(stmt, conn);
          return;
        }
        
        userId = rs.getInt("user_id");
        bidValue = rs.getFloat("bid");
        rs.close();
        stmt.close();
        
        //insert into the winner table
        stmt = conn.prepareStatement("INSERT INTO winners (winner_id, item_id, bid) VALUES (?,?,?)");
        stmt.setInt(1, userId);
        stmt.setInt(2, itemId);
        stmt.setFloat(3, bidValue);
        
        stmt.executeUpdate();
        stmt.close();
        
        stmt = conn.prepareStatement("UPDATE items SET end_date=? WHERE id=?");
        stmt.setString(1, now);
        stmt.setInt(2, itemId);
        stmt.executeUpdate();
        stmt.close();
      }
      catch (SQLException e)
      {
        printError("Failed to execute Query for close auction: " + e, sp);
        Database.rollback(conn);
        Database.closeConnection(stmt, conn);
        return;
      }

    Database.commit(conn);
    Database.closeConnection(stmt, conn);
    
    sp.printHTMLheader("RUBiS: the item " + itemId + " has been closed");
    sp.printHTML(
      "<h2>The detailed information is as follows</h2><br>");
    sp.printHTML("Item id : " + itemId + "<br>");
    sp.printHTML("Winner id  : " + userId + "<br>");
    sp.printHTML("Price paid  : " + bidValue + "<br>");
    sp.printHTML(
      "<br>The following information has been automatically generated by RUBiS:<br>");

    sp.printHTMLfooter();
    
  }

  public void doPost(HttpServletRequest request, HttpServletResponse response)
    throws IOException, ServletException
  {
    doGet(request, response);
  }

  /**
   * Clean up the connection pool.
   */
  public void destroy()
  {
    super.destroy();
  }
}
